require 'fileutils'
require 'optparse'
require 'liquid'

template = nil
object_name = nil
module_name = nil
output_file = nil

OptionParser.new { |opts|
	opts.banner = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #{$0}"
	opts.on('-t', '--template TEMPLATE_FILE_PATH', '–ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É *.liquid') { |temlate_file_path|
		template = File.open(temlate_file_path).read()
	}
	opts.on('-n', '--name NAME', '–ò–º—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞') { |arg|
		object_name = arg
	}
	opts.on('-m', '--module MODULE', '–ò–º—è –º–æ–¥—É–ª—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞') { |arg|
		module_name = arg
	}
	opts.on('-o', '--output_file OUTPUT_FILE_PATH', '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞') { |arg|
		output_file = arg
	}
	opts.on_tail('-h', '--help', '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É') {
		puts opts
		exit 1
	}
}.parse!

puts "–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ ‚è≥"

@template = Liquid::Template.parse(template) 
palette = @template.render('name' => object_name, 'module' => module_name)

puts "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ üõ†"

if output_file.nil?
	puts "‚õî –û—à–∏–±–∫–∞: –ü–∞—Ä–∞–º–µ—Ç—Ä OUTPUT_FILE_PATH –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
	exit
end

dir = File.dirname(output_file)
unless File.directory?(dir)
	FileUtils.mkdir_p(dir)
end

File.write(output_file, palette)

puts "–ì–æ—Ç–æ–≤–æ ‚úÖ"